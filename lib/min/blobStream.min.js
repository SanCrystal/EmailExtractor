var blobStream = (function () {
	return function () {
		var chunks = [];
		var callbacks = {};

		return {
			write: function (chunk) {
				chunks.push(chunk);
			},
			end: function () {
				this.emit("finish");
			},
			on: function (event, callback) {
				if (!callbacks[event]) callbacks[event] = [];
				callbacks[event].push(callback);
			},
			once: function (event, callback) {
				var self = this;
				var wrapper = function () {
					self.removeListener(event, wrapper);
					callback.apply(this, arguments);
				};
				this.on(event, wrapper);
			},
			removeListener: function (event, callback) {
				if (callbacks[event]) {
					callbacks[event] = callbacks[event].filter(function (cb) {
						return cb !== callback;
					});
				}
			},
			emit: function (event) {
				if (callbacks[event]) {
					callbacks[event].forEach(function (callback) {
						callback();
					});
				}
			},
			toBlob: function (type) {
				return new Blob(chunks, { type: type || "application/pdf" });
			},
		};
	};
})();
